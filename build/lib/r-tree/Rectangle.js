"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rectangle = void 0;
class Rectangle {
    constructor(boundingBox) {
        this.x = boundingBox.x;
        this.y = boundingBox.y;
        this.width = "width" in boundingBox ? boundingBox.width : 0;
        this.height = "height" in boundingBox ? boundingBox.height : 0;
    }
    overlaps(boundingBox) {
        return (this.x <= boundingBox.x + boundingBox.width && this.x + this.width >= boundingBox.x) &&
            this.y + this.height >= boundingBox.y && boundingBox.y + boundingBox.height >= this.y;
    }
    containedBy(boundingBox) {
        return this.x >= boundingBox.x && this.x + this.width <= boundingBox.x + boundingBox.width && this.y >= boundingBox.y && this.y + this.height <= boundingBox.y + boundingBox.height;
    }
    growRectangleToFit(boundingBox) {
        this.height = Math.max(this.y + this.height, boundingBox.y + boundingBox.height) - Math.min(this.y, boundingBox.y);
        this.width = Math.max(this.x + this.width, boundingBox.x + boundingBox.width) - Math.min(this.x, boundingBox.x);
        this.x = Math.min(this.x, boundingBox.x);
        this.y = Math.min(this.y, boundingBox.y);
    }
    increaseInAreaIfGrownByRectangle(boundingBox) {
        const maxYCoordinate = Math.max(this.y + this.height, boundingBox.y + boundingBox.height);
        const minYCoordinate = Math.min(this.y, boundingBox.y);
        const maxXCoordinate = Math.max(this.x + this.width, boundingBox.x + boundingBox.width);
        const minXCoordinate = Math.min(this.x, boundingBox.x);
        const newArea = (maxYCoordinate - minYCoordinate) * (maxXCoordinate - minXCoordinate);
        return newArea - this.getArea();
    }
    getArea() {
        return this.height * this.width;
    }
}
exports.Rectangle = Rectangle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVjdGFuZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3ItdHJlZS9SZWN0YW5nbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBSUEsTUFBYSxTQUFTO0lBTXBCLFlBQVksV0FBZ0M7UUFDMUMsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRU0sUUFBUSxDQUFDLFdBQXdCO1FBQ3RDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztZQUMxRixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksV0FBVyxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBRU0sV0FBVyxDQUFDLFdBQXdCO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxXQUFXLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxXQUFXLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUM7SUFDdEwsQ0FBQztJQUVNLGtCQUFrQixDQUFDLFdBQXdCO1FBQ2hELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuSCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEgsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0sZ0NBQWdDLENBQUMsV0FBd0I7UUFDOUQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUYsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RCxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4RixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sT0FBTyxHQUFHLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQyxDQUFDO1FBQ3RGLE9BQU8sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRU0sT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ2xDLENBQUM7Q0FDRjtBQXpDRCw4QkF5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEJvdW5kaW5nQm94IH0gZnJvbSBcIi4uL0B0eXBlcy9Cb3VuZGluZ0JveC5qc1wiO1xuaW1wb3J0IHR5cGUgeyBQb2ludCB9IGZyb20gXCIuLi9AdHlwZXMvUG9pbnRcIjtcblxuXG5leHBvcnQgY2xhc3MgUmVjdGFuZ2xlIGltcGxlbWVudHMgQm91bmRpbmdCb3gge1xuICBwdWJsaWMgeDogbnVtYmVyO1xuICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcbiAgcHVibGljIHk6IG51bWJlcjtcbiAgcHVibGljIGhlaWdodDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGJvdW5kaW5nQm94OiBCb3VuZGluZ0JveCB8IFBvaW50KSB7XG4gICAgdGhpcy54ID0gYm91bmRpbmdCb3gueDtcbiAgICB0aGlzLnkgPSBib3VuZGluZ0JveC55O1xuICAgIHRoaXMud2lkdGggPSBcIndpZHRoXCIgaW4gYm91bmRpbmdCb3ggPyBib3VuZGluZ0JveC53aWR0aCA6IDA7XG4gICAgdGhpcy5oZWlnaHQgPSBcImhlaWdodFwiIGluIGJvdW5kaW5nQm94ID8gYm91bmRpbmdCb3guaGVpZ2h0IDogMDtcbiAgfVxuXG4gIHB1YmxpYyBvdmVybGFwcyhib3VuZGluZ0JveDogQm91bmRpbmdCb3gpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKHRoaXMueCA8PSBib3VuZGluZ0JveC54ICsgYm91bmRpbmdCb3gud2lkdGggJiYgdGhpcy54ICsgdGhpcy53aWR0aCA+PSBib3VuZGluZ0JveC54KSAmJlxuICAgICAgdGhpcy55ICsgdGhpcy5oZWlnaHQgPj0gYm91bmRpbmdCb3gueSAmJiBib3VuZGluZ0JveC55ICsgYm91bmRpbmdCb3guaGVpZ2h0ID49IHRoaXMueTtcbiAgfVxuXG4gIHB1YmxpYyBjb250YWluZWRCeShib3VuZGluZ0JveDogQm91bmRpbmdCb3gpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy54ID49IGJvdW5kaW5nQm94LnggJiYgdGhpcy54ICsgdGhpcy53aWR0aCA8PSBib3VuZGluZ0JveC54ICsgYm91bmRpbmdCb3gud2lkdGggJiYgdGhpcy55ID49IGJvdW5kaW5nQm94LnkgJiYgdGhpcy55ICsgdGhpcy5oZWlnaHQgPD0gYm91bmRpbmdCb3gueSArIGJvdW5kaW5nQm94LmhlaWdodDtcbiAgfVxuXG4gIHB1YmxpYyBncm93UmVjdGFuZ2xlVG9GaXQoYm91bmRpbmdCb3g6IEJvdW5kaW5nQm94KTogdm9pZCB7XG4gICAgdGhpcy5oZWlnaHQgPSBNYXRoLm1heCh0aGlzLnkgKyB0aGlzLmhlaWdodCwgYm91bmRpbmdCb3gueSArIGJvdW5kaW5nQm94LmhlaWdodCkgLSBNYXRoLm1pbih0aGlzLnksIGJvdW5kaW5nQm94LnkpO1xuICAgIHRoaXMud2lkdGggPSBNYXRoLm1heCh0aGlzLnggKyB0aGlzLndpZHRoLCBib3VuZGluZ0JveC54ICsgYm91bmRpbmdCb3gud2lkdGgpIC0gTWF0aC5taW4odGhpcy54LCBib3VuZGluZ0JveC54KTtcbiAgICB0aGlzLnggPSBNYXRoLm1pbih0aGlzLngsIGJvdW5kaW5nQm94LngpO1xuICAgIHRoaXMueSA9IE1hdGgubWluKHRoaXMueSwgYm91bmRpbmdCb3gueSk7XG4gIH1cblxuICBwdWJsaWMgaW5jcmVhc2VJbkFyZWFJZkdyb3duQnlSZWN0YW5nbGUoYm91bmRpbmdCb3g6IEJvdW5kaW5nQm94KTogbnVtYmVyIHtcbiAgICBjb25zdCBtYXhZQ29vcmRpbmF0ZSA9IE1hdGgubWF4KHRoaXMueSArIHRoaXMuaGVpZ2h0LCBib3VuZGluZ0JveC55ICsgYm91bmRpbmdCb3guaGVpZ2h0KTtcbiAgICBjb25zdCBtaW5ZQ29vcmRpbmF0ZSA9IE1hdGgubWluKHRoaXMueSwgYm91bmRpbmdCb3gueSk7XG4gICAgY29uc3QgbWF4WENvb3JkaW5hdGUgPSBNYXRoLm1heCh0aGlzLnggKyB0aGlzLndpZHRoLCBib3VuZGluZ0JveC54ICsgYm91bmRpbmdCb3gud2lkdGgpO1xuICAgIGNvbnN0IG1pblhDb29yZGluYXRlID0gTWF0aC5taW4odGhpcy54LCBib3VuZGluZ0JveC54KTtcbiAgICBjb25zdCBuZXdBcmVhID0gKG1heFlDb29yZGluYXRlIC0gbWluWUNvb3JkaW5hdGUpICogKG1heFhDb29yZGluYXRlIC0gbWluWENvb3JkaW5hdGUpO1xuICAgIHJldHVybiBuZXdBcmVhIC0gdGhpcy5nZXRBcmVhKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QXJlYSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmhlaWdodCAqIHRoaXMud2lkdGg7XG4gIH1cbn1cbiJdfQ==