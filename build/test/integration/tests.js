"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const test = require("tape");
const index_js_1 = require("../../index.js");
test("It should be possible to create an RTree by inserting nodes successively", async (t) => {
    const tree = new index_js_1.RTree({ maxChildrenPerNode: 2 });
    tree.insert({
        x: 0,
        y: 0,
        data: "Contained point"
    });
    tree.insert({
        x: 1,
        y: 1,
        width: 1,
        height: 1,
        data: "Contained area"
    });
    tree.insert({
        x: 2,
        y: 2,
        width: 1,
        height: 1,
        data: "Overlapped area"
    });
    t.deepEquals(tree.search({
        x: 0,
        y: 0,
        width: 2,
        height: 2
    }), ["Contained point", "Contained area", "Overlapped area"], "Expect query to return overlapped data entries");
});
test("It should be possible to create an RTree by batch inserting nodes", async (t) => {
    const tree = new index_js_1.RTree({ maxChildrenPerNode: 2 });
    tree.batchInsert([{
            x: 0,
            y: 0,
            data: "Contained point"
        }, {
            x: 1,
            y: 1,
            width: 1,
            height: 1,
            data: "Contained area"
        }, {
            x: 2,
            y: 2,
            width: 1,
            height: 1,
            data: "Overlapped area"
        }]);
    t.deepEquals(tree.search({
        x: 0,
        y: 0,
        width: 2,
        height: 2
    }), ["Contained point", "Contained area", "Overlapped area"], "Expect query to return overlapped data entries");
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L2ludGVncmF0aW9uL3Rlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQTZCO0FBQzdCLDZDQUF1QztBQUV2QyxJQUFJLENBQUMsMEVBQTBFLEVBQUUsS0FBSyxFQUFDLENBQUMsRUFBQyxFQUFFO0lBQ3pGLE1BQU0sSUFBSSxHQUFHLElBQUksZ0JBQUssQ0FBQyxFQUFFLGtCQUFrQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNWLENBQUMsRUFBRSxDQUFDO1FBQ0osQ0FBQyxFQUFFLENBQUM7UUFDSixJQUFJLEVBQUUsaUJBQWlCO0tBQ3hCLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxNQUFNLENBQUM7UUFDVixDQUFDLEVBQUUsQ0FBQztRQUNKLENBQUMsRUFBRSxDQUFDO1FBQ0osS0FBSyxFQUFFLENBQUM7UUFDUixNQUFNLEVBQUUsQ0FBQztRQUNULElBQUksRUFBRSxnQkFBZ0I7S0FDdkIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNWLENBQUMsRUFBRSxDQUFDO1FBQ0osQ0FBQyxFQUFFLENBQUM7UUFDSixLQUFLLEVBQUUsQ0FBQztRQUNSLE1BQU0sRUFBRSxDQUFDO1FBQ1QsSUFBSSxFQUFFLGlCQUFpQjtLQUN4QixDQUFDLENBQUM7SUFFSCxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdkIsQ0FBQyxFQUFFLENBQUM7UUFDSixDQUFDLEVBQUUsQ0FBQztRQUNKLEtBQUssRUFBRSxDQUFDO1FBQ1IsTUFBTSxFQUFFLENBQUM7S0FDVixDQUFDLEVBQUUsQ0FBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsQ0FBRSxFQUFFLGdEQUFnRCxDQUFDLENBQUM7QUFDcEgsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsbUVBQW1FLEVBQUUsS0FBSyxFQUFDLENBQUMsRUFBQyxFQUFFO0lBQ2xGLE1BQU0sSUFBSSxHQUFHLElBQUksZ0JBQUssQ0FBQyxFQUFFLGtCQUFrQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFbEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2hCLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixJQUFJLEVBQUUsaUJBQWlCO1NBQ3hCLEVBQUU7WUFDRCxDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osS0FBSyxFQUFFLENBQUM7WUFDUixNQUFNLEVBQUUsQ0FBQztZQUNULElBQUksRUFBRSxnQkFBZ0I7U0FDdkIsRUFBRTtZQUNELENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixLQUFLLEVBQUUsQ0FBQztZQUNSLE1BQU0sRUFBRSxDQUFDO1lBQ1QsSUFBSSxFQUFFLGlCQUFpQjtTQUN4QixDQUFDLENBQUMsQ0FBQztJQUVKLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN2QixDQUFDLEVBQUUsQ0FBQztRQUNKLENBQUMsRUFBRSxDQUFDO1FBQ0osS0FBSyxFQUFFLENBQUM7UUFDUixNQUFNLEVBQUUsQ0FBQztLQUNWLENBQUMsRUFBRSxDQUFFLGlCQUFpQixFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixDQUFFLEVBQUUsZ0RBQWdELENBQUMsQ0FBQztBQUNwSCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRlc3QgZnJvbSBcInRhcGVcIjtcbmltcG9ydCB7IFJUcmVlIH0gZnJvbSBcIi4uLy4uL2luZGV4LmpzXCI7XG5cbnRlc3QoXCJJdCBzaG91bGQgYmUgcG9zc2libGUgdG8gY3JlYXRlIGFuIFJUcmVlIGJ5IGluc2VydGluZyBub2RlcyBzdWNjZXNzaXZlbHlcIiwgYXN5bmMgdCA9PiB7XG4gIGNvbnN0IHRyZWUgPSBuZXcgUlRyZWUoeyBtYXhDaGlsZHJlblBlck5vZGU6IDIgfSk7XG5cbiAgdHJlZS5pbnNlcnQoe1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICBkYXRhOiBcIkNvbnRhaW5lZCBwb2ludFwiXG4gIH0pO1xuXG4gIHRyZWUuaW5zZXJ0KHtcbiAgICB4OiAxLFxuICAgIHk6IDEsXG4gICAgd2lkdGg6IDEsXG4gICAgaGVpZ2h0OiAxLFxuICAgIGRhdGE6IFwiQ29udGFpbmVkIGFyZWFcIlxuICB9KTtcblxuICB0cmVlLmluc2VydCh7XG4gICAgeDogMixcbiAgICB5OiAyLFxuICAgIHdpZHRoOiAxLFxuICAgIGhlaWdodDogMSxcbiAgICBkYXRhOiBcIk92ZXJsYXBwZWQgYXJlYVwiXG4gIH0pO1xuXG4gIHQuZGVlcEVxdWFscyh0cmVlLnNlYXJjaCh7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHdpZHRoOiAyLFxuICAgIGhlaWdodDogMlxuICB9KSwgWyBcIkNvbnRhaW5lZCBwb2ludFwiLCBcIkNvbnRhaW5lZCBhcmVhXCIsIFwiT3ZlcmxhcHBlZCBhcmVhXCIgXSwgXCJFeHBlY3QgcXVlcnkgdG8gcmV0dXJuIG92ZXJsYXBwZWQgZGF0YSBlbnRyaWVzXCIpO1xufSk7XG5cbnRlc3QoXCJJdCBzaG91bGQgYmUgcG9zc2libGUgdG8gY3JlYXRlIGFuIFJUcmVlIGJ5IGJhdGNoIGluc2VydGluZyBub2Rlc1wiLCBhc3luYyB0ID0+IHtcbiAgY29uc3QgdHJlZSA9IG5ldyBSVHJlZSh7IG1heENoaWxkcmVuUGVyTm9kZTogMiB9KTtcblxuICB0cmVlLmJhdGNoSW5zZXJ0KFt7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIGRhdGE6IFwiQ29udGFpbmVkIHBvaW50XCJcbiAgfSwge1xuICAgIHg6IDEsXG4gICAgeTogMSxcbiAgICB3aWR0aDogMSxcbiAgICBoZWlnaHQ6IDEsXG4gICAgZGF0YTogXCJDb250YWluZWQgYXJlYVwiXG4gIH0sIHtcbiAgICB4OiAyLFxuICAgIHk6IDIsXG4gICAgd2lkdGg6IDEsXG4gICAgaGVpZ2h0OiAxLFxuICAgIGRhdGE6IFwiT3ZlcmxhcHBlZCBhcmVhXCJcbiAgfV0pO1xuXG4gIHQuZGVlcEVxdWFscyh0cmVlLnNlYXJjaCh7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHdpZHRoOiAyLFxuICAgIGhlaWdodDogMlxuICB9KSwgWyBcIkNvbnRhaW5lZCBwb2ludFwiLCBcIkNvbnRhaW5lZCBhcmVhXCIsIFwiT3ZlcmxhcHBlZCBhcmVhXCIgXSwgXCJFeHBlY3QgcXVlcnkgdG8gcmV0dXJuIG92ZXJsYXBwZWQgZGF0YSBlbnRyaWVzXCIpO1xufSk7XG5cbiJdfQ==